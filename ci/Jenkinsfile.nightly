// We need nightly builds for users who want to test apps, diawi removes old builds and limits downloads, hence the need for Artifactory.
// To see env: echo sh(returnStdout: true, script: 'env')

env.LANG="en_US.UTF-8"
env.LANGUAGE="en_US.UTF-8"
env.LC_ALL="en_US.UTF-8"
env.FASTLANE_DISABLE_COLORS=1

def installJSDeps() {
    def attempt = 1
    def maxAttempts = 10
    def installed = false
    while (!installed && attempt <= maxAttempts) {
        println "#${attempt} attempt to install npm deps"
        sh 'scripts/prepare-for-platform.sh mobile'
        sh 'npm install'
        installed = fileExists('node_modules/web3/index.js')
        attemp = attempt + 1
    }
}

timeout(90) {
    node ('macos'){
      def apkUrl = ''
      def ipaUrl = ''
      def testPassed = true

      load "$HOME/env.groovy"

      try {

        stage('Git & Dependencies') {
          slackSend color: 'good', message: 'Nightly build started. ' + env.BUILD_URL

          checkout scm

          sh 'rm -rf node_modules'
          sh 'cp .env.jenkins .env'

          installJSDeps()

          sh 'mvn -f modules/react-native-status/ios/RCTStatus dependency:unpack'
            sh 'cd ios && pod install && cd ..'
          }

        stage('Tests') {
          sh 'lein test-cljs'
        }

        stage('Build') {
          sh 'lein prod-build'
        }

        stage('Build (Android)') {
          sh 'cd android && ./gradlew react-native-android:installArchives && ./gradlew assembleRelease'
        }

        stage('Build (iOS)') {
          env.RCT_NO_LAUNCH_PACKAGER = true
          sh 'xcodebuild -workspace ios/StatusIm.xcworkspace -scheme StatusIm -configuration release -archivePath status clean archive'
          sh 'xcodebuild -exportArchive -exportPath status -archivePath status.xcarchive -exportOptionsPlist ios/archive-develop.plist'
        }

        stage('Deploy (Android)') {
          def artifact_dir = pwd() + '/android/app/build/outputs/apk/release/'
          println (artifact_dir + 'app-release.apk')
          sh ('ls -la ' + artifact_dir)
          def artifact = (artifact_dir + 'app-release.apk')
          def server = Artifactory.server('artifacts')
          def shortCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim().take(6)
          def filename = 'im.status.ethereum-' + shortCommit + '-nightly' +  '.apk'
          def newArtifact = (artifact_dir + filename)
          sh ('mv ' + artifact + ' '  + newArtifact)
          def uploadSpec = '{ "files": [ { "pattern": "*apk/release/' + filename + '", "target": "nightlies-local" }]}'
          def buildInfo = server.upload(uploadSpec)
          apkUrl = 'http://artifacts.status.im:8081/artifactory/nightlies-local/' + filename

          sh ('echo ARTIFACT Android: ' + apkUrl)
        }

        stage('Deploy (iOS)') {
          withCredentials([string(credentialsId: 'diawi-token', variable: 'token')]) {
            def job = sh(returnStdout: true, script: 'curl https://upload.diawi.com/ -F token='+token+' -F file=@status/StatusIm.ipa -F find_by_udid=0 -F wall_of_apps=0 | jq -r ".job"').trim()
            sh 'sleep 10'
            def hash = sh(returnStdout: true, script: "curl -vvv 'https://upload.diawi.com/status?token="+token+"&job="+job+"'|jq -r '.hash'").trim()
            ipaUrl = 'https://i.diawi.com/' + hash

            sh ('echo ARTIFACT iOS: ' + ipaUrl)
          }
        }
      } catch (e) {
        slackSend color: 'bad', message: 'Nightly build (develop) failed to build. ' + env.BUILD_URL
        throw e
      }

      stage('Slack Notification') {
        def c = (testPassed ? 'good' : 'warning' )
        slackSend color: c, message: 'Nightly build (develop) \nTests: ' + (testPassed ? ':+1:' : ':-1:') + ')\nAndroid: ' + apkUrl + '\n iOS: ' + ipaUrl
        build job: 'status-react/status-nightly-publish-link', parameters: [[$class: 'StringParameterValue', name: 'APK_URL', value: apkUrl], [$class: 'StringParameterValue', name: 'IOS_URL', value: ipaUrl]]
      }

      stage('Build (Android) for e2e tests') {
        sh 'cd android && mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/app-release.original.apk && ENVFILE=.env.e2e ./gradlew assembleRelease'
      }

      stage('Upload apk for e2e tests') {
        if (env.CHANGE_ID != null){
        withCredentials([string(credentialsId: 'SAUCE_ACCESS_KEY', variable: 'key'), string(credentialsId: 'SAUCE_USERNAME', variable: 'username')]){
          def apk_name = env.CHANGE_ID + '.apk'
          sh('curl -u ' + username+ ':' + key + ' -X POST -H "Content-Type: application/octet-stream" https://saucelabs.com/rest/v1/storage/' + username + '/' + apk_name + '?overwrite=true --data-binary @android/app/build/outputs/apk/release/app-release.apk')
        }
        withCredentials([string(credentialsId: 'diawi-token', variable: 'token')]) {
          def job = sh(returnStdout: true, script: 'curl https://upload.diawi.com/ -F token='+token+' -F file=@android/app/build/outputs/apk/release/app-release.apk -F find_by_udid=0 -F wall_of_apps=0 | jq -r ".job"').trim()
          sh 'sleep 10'
          def hash = sh(returnStdout: true, script: "curl -vvv 'https://upload.diawi.com/status?token="+token+"&job="+job+"'|jq -r '.hash'").trim()
          apkUrl = 'https://i.diawi.com/' + hash

          sh ('echo ARTIFACT Android for e2e tests: ' + apkUrl)
        }
        }
      }
    }
}
