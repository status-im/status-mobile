library 'status-jenkins-lib@v1.5.4'

/* Options section can't access functions in objects. */
def isPRBuild = utils.isPRBuild()

pipeline {
  agent { label 'macos && x86_64 && nix-2.8 && xcode-13.4' }

  parameters {
    string(
      name: 'BUILD_TYPE',
      description: 'Specify build type. Values: pr / e2e / nightly / release',
      defaultValue: 'pr',
    )
  }

  options {
    timestamps()
    /* Prevent Jenkins jobs from running forever */
    timeout(time: 25, unit: 'MINUTES')
    /* Limit builds retained */
    buildDiscarder(logRotator(
      numToKeepStr: '10',
      daysToKeepStr: '20',
      artifactNumToKeepStr: '10',
    ))
    /* Allows combined build to copy */
    copyArtifactPermission('/status-mobile/*')
    /* Abort old PR builds. */
    disableConcurrentBuilds(
      abortPrevious: isPRBuild
    )
  }

  environment {
    LANG     = "en_US.UTF-8"
    LC_ALL   = "en_US.UTF-8"
    LANGUAGE = "en_US.UTF-8"
    TARGET   = 'ios'
    NIX_CONF_DIR = "${env.WORKSPACE}/nix"
    /* See nix/README.md */
    NIX_IGNORE_SYMLINK_STORE = 1
    FASTLANE_DISABLE_COLORS = 1
    BUNDLE_PATH = "${HOME}/.bundle"
  }

  stages {
    stage('Prep') {
      steps {
        script {
          utils.doGitRebasePR()
          utils.symlinkEnv()
          println("Build Number: ${utils.genBuildNumber()}")
        }
      }
    }
    stage('JSBundle') {
      steps {
        script { ios.jsbundle() }
      }
    }
    stage('Bundle') {
      steps {
        script { api = ios.bundle() }
      }
    }
    stage('Parallel Upload') {
      parallel {
        stage('Archive') {
          steps {
            archiveArtifacts api
          }
        }
        stage('Upload') {
          steps { script {
            env.PKG_URL = s3.uploadArtifact(api)
            jenkins.setBuildDesc(IPA: env.PKG_URL)
            /* e2e builds get tested in SauceLabs */
            if (utils.isE2EBuild()) {
              env.SAUCE_URL = ios.uploadToSauceLabs()
            } else if (!utils.isReleaseBuild()) {
              env.DIAWI_URL = ios.uploadToDiawi()
            }
          } }
        }
      }
    }
  }
  post {
    success { script { github.notifyPR(true) } }
    failure { script { github.notifyPR(false) } }
    always  { sh 'make purge' }
  }
}
