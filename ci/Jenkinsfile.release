// We need release builds for users who want to test apps, diawi removes old builds and limits downloads, hence the need for Artifactory.
// To see env: echo sh(returnStdout: true, script: 'env')

env.LANG="en_US.UTF-8"
env.LANGUAGE="en_US.UTF-8"
env.LC_ALL="en_US.UTF-8"
env.FASTLANE_DISABLE_COLORS=1
env.REALM_DISABLE_ANALYTICS=1

def installJSDeps() {
    def attempt = 1
    def maxAttempts = 10
    def installed = false
    while (!installed && attempt <= maxAttempts) {
        println "#${attempt} attempt to install npm deps"
        sh 'npm install'
        installed = fileExists('node_modules/web3/index.js')
        attemp = attempt + 1
    }
}

timeout(90) {
    node ('fastlane'){
      def apkUrl = ''
      def ipaUrl = ''
      def version
      def build_no

      load "$HOME/env.groovy"

      try {

        stage('Git & Dependencies') {
          slackSend color: 'good', message: BRANCH_NAME + ' build started. ' + env.BUILD_URL

          checkout scm

          sh 'git fetch --tags'

          sh 'rm -rf node_modules'
          sh 'cp .env.prod .env'

          sh 'scripts/prepare-for-platform.sh mobile'
          version = readFile("${env.WORKSPACE}/VERSION").trim()
          installJSDeps()

          sh 'mvn -f modules/react-native-status/ios/RCTStatus dependency:unpack'
          sh 'cd ios && pod install && cd ..'
        }

        stage('Tag Build') {
          withCredentials([[
            $class: 'UsernamePasswordMultiBinding',
            credentialsId: 'status-im-auto',
            usernameVariable: 'GIT_USER',
            passwordVariable: 'GIT_PASS'
          ]]) {
            build_no = sh(
              returnStdout: true,
              script: './scripts/build_no.sh --increment'
            ).trim()
          }
        }

        stage('Tests') {
          sh 'lein test-cljs'
        }

        stage('Build') {
          sh 'lein prod-build'
        }

        stage('Build (Android)') {
          sh 'cd android && ./gradlew react-native-android:installArchives && ./gradlew assembleRelease -PreleaseVersion=' + version
        }

<<<<<<< HEAD
        stage('Build (iOS)') {
          sh "plutil -replace CFBundleShortVersionString  -string ${version} ios/StatusIm/Info.plist"
          sh "plutil -replace CFBundleVersion  -string ${build_no} ios/StatusIm/Info.plist"
          env.RCT_NO_LAUNCH_PACKAGER = true
          sh 'xcodebuild -workspace ios/StatusIm.xcworkspace -scheme StatusIm -configuration release -archivePath status clean archive'
          sh 'xcodebuild -exportArchive -exportPath status -archivePath status.xcarchive -exportOptionsPlist ios/archive-develop.plist'
        }

=======
>>>>>>> upstream/develop
        stage('Deploy (Android)') {
          def artifact_dir = pwd() + '/android/app/build/outputs/apk/release/'
          println (artifact_dir + 'app-release.apk')
          sh ('ls -la ' + artifact_dir)
          def artifact = (artifact_dir + 'app-release.apk')
          def server = Artifactory.server('artifacts')
          shortCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim().take(6)
          def filename = 'im.status.ethereum-' + shortCommit + '-rel' + '.apk'
          def newArtifact = (artifact_dir + filename)
          sh ('mv ' + artifact + ' '  + newArtifact)
          def uploadSpec = '{ "files": [ { "pattern": "*apk/release/' + filename + '", "target": "nightlies-local" }]}'
          def buildInfo = server.upload(uploadSpec)
          apkUrl = 'http://artifacts.status.im:8081/artifactory/nightlies-local/' + filename

          sh ('echo ARTIFACT Android: ' + apkUrl)
        }

        stage('Build (iOS)') {
          withCredentials([
              string(
                credentialsId: "slave-pass-${env.NODE_NAME}",
                variable: 'KEYCHAIN_PASSWORD'
              ),
              string(
                credentialsId: 'fastlane-match-password',
                variable:'MATCH_PASSWORD'
              )]) {
            sh "plutil -replace CFBundleShortVersionString  -string ${version} ios/StatusIm/Info.plist"
            sh "plutil -replace CFBundleVersion  -string ${build_no} ios/StatusIm/Info.plist"
            sh 'fastlane ios adhoc'
        }

        stage('Deploy (iOS)') {

          withCredentials([
              string(credentialsId: 'diawi-token', variable: 'DIAWI_TOKEN'),
              string(credentialsId: 'GIT_HUB_TOKEN', variable: 'GITHUB_TOKEN'),
              string(credentialsId: 'SLACK_JENKINS_WEBHOOK', variable: 'SLACK_URL')
          ]) {
            sh 'fastlane ios upload_diawi'

            env.WORKSPACE = pwd()
            ipaUrl = readFile "${env.WORKSPACE}/fastlane/diawi.out"
          }
        }

      } catch (e) {
        slackSend color: 'bad', message: 'Release build failed to build. ' + env.BUILD_URL
        throw e
      }

      stage('Slack Notification') {
        slackSend color: 'good', message: 'Release build \nAndroid: ' + apkUrl + '\n iOS: ' + ipaUrl
      }

      stage('Build (Android) for e2e tests') {
        sh 'cd android && ENVFILE=.env.e2e ./gradlew assembleRelease'
      }

      stage('Upload apk for e2e tests') {
          env.SAUCE_LABS_APK = 'im.status.ethereum-e2e-' + shortCommit + '.apk'
          withCredentials([
              string(credentialsId: 'SAUCE_ACCESS_KEY', variable: 'SAUCE_ACCESS_KEY'),
              string(credentialsId: 'SAUCE_USERNAME', variable: 'SAUCE_USERNAME'),
              string(credentialsId: 'diawi-token', variable: 'DIAWI_TOKEN'),
              string(credentialsId: 'GIT_HUB_TOKEN', variable: 'GITHUB_TOKEN'),
              string(credentialsId: 'SLACK_JENKINS_WEBHOOK', variable: 'SLACK_URL')
          ]) {
            sh 'fastlane android saucelabs'
            sh 'fastlane android upload_diawi'
          }
      }

      stage('Run extended e2e tests') {
        build job: 'end-to-end-tests/status-app-nightly', parameters: [string(name: 'apk', value: '--apk=' + env.SAUCE_LABS_APK)], wait: false
      }

    }
}
